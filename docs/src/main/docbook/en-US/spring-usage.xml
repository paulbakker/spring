<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright [2010], Red Hat, Inc., and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="spring-usage">
  <title>Seam Spring - Architecture and Usage</title>

  <para>The functionality of the Seam Spring module is provided by two sets of
  components:</para>

  <itemizedlist>
    <listitem>
      <para>A CDI portable extension for accessing Spring application contexts
      and managing Spring beans;</para>
    </listitem>

    <listitem>
      <para>A FactoryBean and corresponding namespace for accessing
      BeanManagers and importing CDI beans into Spring.</para>
    </listitem>
  </itemizedlist>

  <section>
    <title> Accessing Spring artifacts from CDI</title>

    <para>The Seam Spring module uses the resource producer pattern for
    accessing Spring contexts and beans from within CDI. The Spring extension
    is responsible for producing the actual instances. This mechanism allows
    the Spring beans to participate in regular CDI injection and the injection
    targets to be agnostic of the provenience of the injected references,
    enforcing true separation of concerns. Through this mechanisms Spring
    contexts can be injected as Spring beans too, if necessary. </para>

    <para>The resource producer pattern is used for:</para>

    <itemizedlist>
      <listitem>
        <para>producing Spring application context instances;</para>
      </listitem>

      <listitem>
        <para>producing Spring beans;</para>
      </listitem>
    </itemizedlist>

    <para>The registration of Spring application contexts as CDI beans is a
    prerequisite for accessing the Spring beans that are created by
    them.</para>

    <section>
      <title>Accessing Spring application contexts</title>

      <para>The Seam Spring module can access two types of
      contexts:<itemizedlist>
          <listitem>
            <para>contexts created by the application (e.g. bootstrapped by
            Spring's <code>ContextLoaderListener</code>); and</para>
          </listitem>

          <listitem>
            <para>contexts bootstrapped by the extension itself.</para>
          </listitem>
        </itemizedlist></para>

      <section>
        <title>The <code>@SpringContext</code> qualifier</title>

        <para>As a general rule, Spring <code>ApplicationContext</code>
        instances that the extension is interacting with are installed as CDI
        beans with a <code>@SpringContext</code> qualifier, with the following
        structure:</para>

          <programlisting role="JAVA">@Qualifier
@Inherited
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})
public @interface SpringContext {
   String name() default "default";
}</programlisting>

        <para>The name attribute of the context helps identifying between
        different ApplicationContexts, if the extension needs to deal with
        multiple such instances.</para>

        <para><table>
            <title>Attributes of
            @org.jboss.seam.spring.context.SpringContext</title>

            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Attribute</entry>

                  <entry>Type</entry>

                  <entry>Significance</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><code>name</code></entry>

                  <entry><code>String</code></entry>

                  <entry>Unique identifier for a Spring application context
                  bean</entry>
                </row>
              </tbody>
            </tgroup>
          </table></para>
      </section>

      <section>
        <title>Producing Spring contexts</title>

        <para>CDI applications can install Spring contexts as CDI beans by
        defining producer fields with the following general pattern:</para>
          <programlisting language="java" role="JAVA">@Produces
@SpringContext
@&lt;Context-Type&gt;
ApplicationContext context;</programlisting>
          <para>This will create a CDI bean of the ApplicationContext type.
                      The nature of the context (bootstrapped by the extension, or
                      looked up elsewhere) is controlled by a specific annotation. The
                      supported annotations are detailed in the following
                      subsections.</para>

        <tip>
          <para>As a reminder, if the <code>name</code> attribute of the
          <code>@SpringContext</code> qualifier is not set, it will be set to
          'default'.</para>
        </tip>

        <section>
          <title>Installing a web application context as a CDI bean</title>

          <para>The Seam Spring extension can install a web application
          context (the application context created by a ContextLoaderListener)
          by defining a producer field, as follows:</para>

<programlisting language="java" role="JAVA">package org.jboss.seam.spring.test.bootstrap;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;

import org.jboss.seam.spring.context.SpringContext;
import org.jboss.seam.spring.context.Web;
import org.springframework.context.ApplicationContext;

public class WebContextProducer {

    @Produces
    @SpringContext
    @Web
    ApplicationContext context;

}</programlisting>


          <note>
            <para>The example above will work only in a web application with a
            Spring application context boostrapped by a
            ContextLoaderListener.</para>
          </note>

          <para>The <code>@org.jboss.seam.spring.context.Web</code> annotation
          must be placed only on the producer field for the
          <code>ApplicationContext</code>, and it will register a producer
          that looks up the parent web <code>ApplicationContext</code>.</para>
        </section>

        <section>
          <title>Installing a custom-configured Spring application
          context</title>

          <para>The Seam Spring extension can create a Spring application
          ad-hoc and install it as a Spring context as follows:</para>

              <programlisting language="java" role="JAVA">package org.jboss.seam.spring.test.bootstrap;

import javax.enterprise.inject.Produces;

import org.jboss.seam.spring.context.Configuration;
import org.jboss.seam.spring.bocontextpringContext;
import org.springframework.context.ApplicationContext;

public class ConfigurationContextProducer {

   @Produces
   @SpringContext
   @Configuration(locations = "classpath*:org/jboss/seam/spring/test/bootstrap/applicationContext.xml")
   ApplicationContext context;
}
            </programlisting>
<para>The <code>@org.jboss.seam.spring.context.Configuration</code> annotation
          must be placed only on the producer field of the
          <code>ApplicationContext</code>, and it will register a producer
          that creates an <code>ApplicationContext</code> from the files in
          the locations attribute of the annotation.</para>

          <para>The attributes supported by
          @org.jboss.seam.spring.bootstrap.Configuration are listed in the
          following table:<table>
              <title>Attributes of the
              @org.jboss.seam.spring.context.Configuration</title>

              <tgroup cols="3">
                <thead>
                  <row>
                    <entry>Attribute</entry>

                    <entry>Type</entry>

                    <entry>Significance</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><code>locations</code></entry>

                    <entry><code>String</code></entry>

                    <entry>Comma-separated list of file locations. Observes
                    the conventions regarding the 'classpath:', 'classpath*:'
                    and 'file:' prefixes of Spring</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </section>
      </section>

      <section>
        <title>Implicit Spring context bootstrapping</title>

        <para>The producer fields provide a convenient and accesible way of
        registering a Spring ApplicationContext, especially for looking up
        contexts created externally (although direct bootstrap is supported as
        well). A number of Spring ApplicationContexts can also be created by
        the extension itself.</para>

        <para>This can be done by creating a file named
        /META-INF/org.jboss.seam.spring.contexts which contains a number of
        key-value pairs, with the keys representing context names and values
        representing context locations, as follows:</para>

        <para><informalexample>
            <programlisting>default=classpath*:org/jboss/seam/spring/test/bootstrap/applicationContext.xml</programlisting>
          </informalexample></para>

        <note>
          <para>The extension supports the registration of multiple
          application contexts.</para>
        </note>

        <para>An important feature of Spring context bootstrapping is that
        Spring beans will be automatically vetoed as CDI beans.</para>


          <para>The main difference between implicit bootstrapping and
          producer-field based bootstrapping is that implicit bootstrapping
          creates the Spring context during CDI deployment and explicit
          bootstrapping creates a Spring context after deployment. As such,
          implicit deployment can do various tasks such as auto-vetoing Spring
          beans and preventing them to be deployed as CDI beans.</para>

      </section>
    </section>

    <section>
      <title>Exposing Spring beans as CDI beans</title>

      <para>Spring beans can be added as CDI beans explicitly, using a
      producer field. In order to do so, a Spring ApplicationContext must be
      registered if they are created by one of the CDI-accessible Spring
      contexts, as shown in the previous section. This can be done by producer
      fields and the @SpringBean annotation, as in the following
      example:</para>

<programlisting role="JAVA">public class SimpleBeanProducer {

    @Produces @SpringBean(fromContext = "context2") SimpleBean simpleBean;

    @Produces @SpringBean ComplicatedBean complicatedBean;
}
</programlisting>
<para>The result is that two CDI beans are available for injection
        and lookup: one based on the SimpleBean Spring bean defined in the
        Spring context registered as 'context2' and the other, based on the
        ComplicatedBean defined in the Spring context registered as
        'default'.</para>

    </section>
  </section>

  <section>
    <title>Importing CDI beans into Spring applications</title>

    <para>The Seam Spring module also supports the registration of CDI beans
    as Spring beans as well. Once CDI beans are imported into a Spring
    ApplicationContext, they can be injected as regular Spring beans, either
    via XML or by annotations.</para>

    <para>This can be done by using the dedicated CDI namespace, which can be
    defined as in the following example:</para>

<programlisting role="XML">&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cdi="http://www.jboss.org/schema/seam/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.jboss.org/schema/seam/spring http://www.jboss.org/schema/seam/spring/seam-spring.xsd"&gt;

   &lt;!-- bean definitions --&gt;

&lt;/beans&gt;</programlisting>

    <section>
      <title>Registering a BeanManager</title>

      <para>Spring applications can get access to a BeanManager through the
      following bean definition.</para>

<programlisting role="XML">&lt;cdi:bean-manager/&gt;</programlisting>

      <para>The bean has the id 'beanManager' by default.</para>
    </section>

    <section>
      <title>Importing a CDI bean as a Spring bean</title>

      <para>A CDI bean can be imported as a Spring bean by using a namespace

      element as follows:</para>
        <programlisting role="XML">&lt;cdi:bean-reference id="cdiBean" type="org.jboss.seam.spring.test.injection.CdiBean"/&gt;</programlisting>
      <para>A CDI bean with qualfiers can be imported as follows:</para>

<programlisting role="XML">&lt;cdi:bean-reference id="secondCdiBean" type="org.jboss.seam.spring.test.injection.SecondCdiBean"&gt;
  &lt;cdi:qualifier type="org.jboss.seam.spring.test.injection.CdiQualifier"/&gt;
&lt;/cdi:bean-reference&gt;</programlisting>

      <para>If the qualifiers have attributes, the bean can be imported as
      follows:</para>

<programlisting role="XML">&lt;cdi:bean-reference id="thirdCdiBean" type="org.jboss.seam.spring.test.injection.ThirdCdiBean"&gt;
  &lt;cdi:qualifier type="org.jboss.seam.spring.test.injection.CdiQualifierWithAttributes"&gt;
     &lt;cdi:attribute name="name" value="myBean"/&gt;
  &lt;/cdi:qualifier&gt;
 &lt;/cdi:bean-reference&gt;</programlisting>
          <para>The conversion from String to the actual type of the attribute
          is handled by Spring's ConversionService.</para>

          <para>CDI beans are imported as prototype-scoped Spring beans, which
          means that a new reference is acquired every time the bean is
          injected into a Spring bean. This is done in order to preserve the
          original scope of the CDI bean.</para>

    </section>
  </section>

  <!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
